using Newtonsoft.Json;
using PhilLibX;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using HydraLib.Assets;

namespace HydraLib.Games
{
    public partial class BlackOps3
    {
        public class AnimationStateMachine
        {
            /// <summary>
            /// Bo3 AI ASM Header
            /// </summary>
            public struct AnimationStateMachineHeader
            {
                /// <summary>
                /// Pointer to the name of this raw file
                /// </summary>
                public long NamePointer { get; set; }

                /// <summary>
                /// Pointer to the Root States
                /// </summary>
                public long RootStatesPointer { get; set; }

                /// <summary>
                /// Number of Root States
                /// </summary>
                public int RootStateCount { get; set; }

                /// <summary>
                /// Null Padding
                /// </summary>
                private int Padding { get; set; }

                /// <summary>
                /// Pointer to the Sub States
                /// </summary>
                public long SubStatesPointer { get; set; }

                /// <summary>
                /// Number of Sub States
                /// </summary>
                public int SubStateCount { get; set; }

                /// <summary>
                /// Null Padding
                /// </summary>
                private int Padding1 { get; set; }

                /// <summary>
                /// Pointer to the Transitions
                /// </summary>
                public long TransitionsPointer { get; set; }

                /// <summary>
                /// Number of Transitions
                /// </summary>
                public int TransitionCount { get; set; }

                /// <summary>
                /// Null Padding
                /// </summary>
                private int Padding2 { get; set; }
            }

            /// <summary>
            /// Bo3 AI ASM Main Header
            /// </summary>
            public struct AnimStateMachineRootStateHeader
            {
                /// <summary>
                /// Index of the Name of this Map in the String Database
                /// </summary>
                public int NameStringIndex { get; set; }

                /// <summary>
                /// Null Padding
                /// </summary>
                private int Padding { get; set; }

                /// <summary>
                /// Pointer to the Indices of this state's SubStates
                /// </summary>
                public long SubStateIndicesPointer { get; set; }

                /// <summary>
                /// Number of Sub States
                /// </summary>
                public int SubStateCount { get; set; }
            }

            /// <summary>
            /// Bo3 AI ASM Main Header
            /// </summary>
            public struct AnimStateMachineSubstate
            {
                /// <summary>
                /// Index of the Name of this Map in the String Database
                /// </summary>
                public int NameStringIndex { get; set; }

                /// <summary>
                /// Pointer to the Full/Path (i.e. zombie_dog > walk = walk@zombie_dog) Name of this SubState (generated by Linker, not needed)
                /// </summary>
                public int PathStringIndex { get; set; }

                /// <summary>
                /// Boolean Flags
                /// </summary>
                public long Flags { get; set; }

                /// <summary>
                /// Index of the Main State this SubState belongs to
                /// </summary>
                public int ParentMainStateIndex { get; set; }

                /// <summary>
                /// Index of the Name of this SubStates Animation Selector
                /// </summary>
                public int AnimationSelectorStringIndex { get; set; }

                /// <summary>
                /// Index of the Name of this SubStates Aim Selector
                /// </summary>
                public int AimSelectorStringIndex { get; set; }

                /// <summary>
                /// Index of the Name of this SubStates Shoot Selector
                /// </summary>
                public int ShootSelectorStringIndex { get; set; }

                /// <summary>
                /// Index of the Name of this SubStates Transition Decorator
                /// </summary>
                public int TransitionDecoratorStringIndex { get; set; }

                /// <summary>
                /// Index of the Name of this SubStates Delta Layer Function
                /// </summary>
                public int DeltaLayerFunctionStringIndex { get; set; }

                /// <summary>
                /// Index of the Name of this SubStates Transition Decorator Layer Function 
                /// </summary>
                public int TransDecLayerFunctionStringIndex { get; set; }

                /// <summary>
                /// Index of the Name of this SubStates ASM Client Notification
                /// </summary>
                public int ASMClientNofityStringIndex { get; set; }

                /// <summary>
                /// Pointer to the Indices of this state's SubStates
                /// </summary>
                public long TransitionIndicesPointer { get; set; }

                /// <summary>
                /// Number of Sub States
                /// </summary>
                public int TransitionCount { get; set; }

                /// <summary>
                /// Null Padding
                /// </summary>
                private int Padding { get; set; }
            }

            /// <summary>
            /// Bo3 AI ASM Main Header
            /// </summary>
            public struct AnimStateMachineTransition
            {
                /// <summary>
                /// Index of the Name of this Map in the String Database
                /// </summary>
                public int NameStringIndex { get; set; }

                /// <summary>
                /// Pointer to the Full/Path (i.e. walk@zombie_dog>somefuckingtransitionlad) Name of this Transition (generated by Linker, not needed)
                /// </summary>
                public int PathStringInidex { get; set; }

                /// <summary>
                /// Null Padding
                /// </summary>
                private int Padding { get; set; }

                /// <summary>
                /// Index of the Main State this Transition belongs to?
                /// </summary>
                public int ParentMainStateIndex { get; set; }

                /// <summary>
                /// Index of the Sub State this Transition belongs to?
                /// </summary>
                public int ParentSubStateIndex { get; set; }

                /// <summary>
                /// Index of the Name of this Transitions Parent Main State (generated by Linker, not needed)
                /// </summary>
                public int ParentMainStateNameStringIndex { get; set; }

                /// <summary>
                /// Index of the Name of this Transitions Parent Sub State (generated by Linker, not needed)
                /// </summary>
                public int ParentSubStateNameStringIndex { get; set; }

                /// <summary>
                /// Index of the Name of this Transitions Animation Selector
                /// </summary>
                public int AnimationSelectorStringIndex { get; set; }

                /// <summary>
                /// Null Padding
                /// </summary>
                private long Padding2 { get; set; }

                /// <summary>
                /// Null Padding
                /// </summary>
                private long Padding3 { get; set; }
            }

            public static void Load(AssetPool assetPool)
            {
                // Loop through entire pool, and add what valid assets
                for (int i = 0; i < assetPool.Size; i++)
                {
                    // Read ASM
                    var animStateMachine = Hydra.ActiveGameReader.ReadStruct<AnimationStateMachineHeader>(assetPool.FirstEntry + (i * assetPool.HeaderSize));
                    // Check is it a null/empty slot
                    if (assetPool.IsNullAsset(animStateMachine.NamePointer))
                        continue;
                    // Add Asset
                    Hydra.LoadedAssets.Add(new Asset()
                    {
                        Name = Hydra.ActiveGameReader.ReadNullTerminatedString(animStateMachine.NamePointer),
                        HeaderAddress = assetPool.FirstEntry + (i * assetPool.HeaderSize),
                        ExportFunction = Export,
                        Type = assetPool.Name,
                        Information = String.Format("States - {0}", animStateMachine.RootStateCount + animStateMachine.SubStateCount),
                    });
                }
            }

            public static bool Export(Asset asset)
            {
                // Read Header
                var animStateMachineHeader = Hydra.ActiveGameReader.ReadStruct<AnimationStateMachineHeader>(asset.HeaderAddress);
                // Check name pointer, if it's changed, our asset has changed
                if (asset.Name != Hydra.ActiveGameReader.ReadNullTerminatedString(animStateMachineHeader.NamePointer))
                    return false;
                // Create output path
                string path = Path.Combine("exported_files", Hydra.ActiveGameName, "animstatemachines", asset.Name);
                Directory.CreateDirectory(Path.GetDirectoryName(path));
                // Create Transitions
                var transitions = new AnimationStateMachineObj.AnimationStateObj.TransitionObj[animStateMachineHeader.TransitionCount];
                // Load Transition Buffer
                var transitionBuffer = Hydra.ActiveGameReader.ReadBytes(animStateMachineHeader.TransitionsPointer, animStateMachineHeader.TransitionCount * 48);
                // Loop through them
                for(int i = 0; i < animStateMachineHeader.TransitionCount; i++)
                {
                    // Load Transition
                    var transition = ByteUtil.BytesToStruct<AnimStateMachineTransition>(transitionBuffer, i * 48);
                    // Convert to generic transition
                    transitions[i] = new AnimationStateMachineObj.AnimationStateObj.TransitionObj(GetString(transition.NameStringIndex), GetString(transition.AnimationSelectorStringIndex));
                }

                // Create Sub States
                var subStates = new AnimationStateMachineObj.AnimationStateObj[animStateMachineHeader.SubStateCount];
                // Load SubState Buffer
                var subStateBuffer = Hydra.ActiveGameReader.ReadBytes(animStateMachineHeader.SubStatesPointer, animStateMachineHeader.SubStateCount * 64);
                // Loop through them
                for (int i = 0; i < animStateMachineHeader.SubStateCount; i++)
                {
                    // Load Sub State
                    var subState = ByteUtil.BytesToStruct<AnimStateMachineSubstate>(subStateBuffer, i * 64);

                    // Convert to generic state
                    subStates[i] = new AnimationStateMachineObj.AnimationStateObj()
                    {
                        // Grab Name
                        Name = GetString(subState.NameStringIndex),

                        // Grab Strings
                        AnimationSelector     = GetString(subState.AnimationSelectorStringIndex),
                        AimSelector           = GetString(subState.AimSelectorStringIndex),
                        ShootSelector         = GetString(subState.ShootSelectorStringIndex),
                        TransitionDecorator   = GetString(subState.TransitionDecoratorStringIndex),
                        DeltaLayerFunction    = GetString(subState.DeltaLayerFunctionStringIndex),
                        TransDecLayerFunction = GetString(subState.TransDecLayerFunctionStringIndex),
                        ASMClientNotify       = GetString(subState.ASMClientNofityStringIndex),

                        // Set Bools
                        RequiresRagdollNote = (subState.Flags & 0x2)                          != 0,
                        Terminal            = (subState.Flags & ((long)0x1    << 0x20))       != 0,
                        LoopSync            = (subState.Flags & ((long)0x2    << 0x20))       != 0,
                        CleanLoop           = (subState.Flags & ((long)0x80   << 0x20))       != 0,
                        MultipleDelta       = (subState.Flags & ((long)0x4    << 0x20))       != 0,
                        Parametric2D        = (subState.Flags & ((long)0x8    << 0x20))       != 0,
                        AnimDrivenLocmotion = (subState.Flags & ((long)0x100  << 0x20))       != 0,
                        Coderate            = (subState.Flags & ((long)0x10   << 0x20))       != 0,
                        SpeedBlend          = (subState.Flags & ((long)0x200  << 0x20))       != 0,
                        AllowTransDecAim    = (subState.Flags & ((long)0x20   << 0x20))       != 0,
                        ForceFire           = (subState.Flags & ((long)0x40   << 0x20))       != 0,
                    };

                    // Check for transitions
                    if(subState.TransitionCount > 0 && subState.TransitionIndicesPointer > 0)
                    {
                        // Create Transitions
                        subStates[i].Transitions = new Dictionary<string, AnimationStateMachineObj.AnimationStateObj.TransitionObj>();
                        // Read Indices
                        var indicesBuffer = Hydra.ActiveGameReader.ReadBytes(subState.TransitionIndicesPointer, subState.TransitionCount * 4);
                        // Add transitions
                        for(int j = 0; j < subState.TransitionCount; j++)
                        {
                            // Get Transition
                            var transition = transitions[BitConverter.ToInt32(indicesBuffer, j * 4)];
                            // Add to state
                            subStates[i].Transitions[transition.Name] = transition;
                        }
                    }
                }

                // Create resulting ASM
                var animStateMachine = new AnimationStateMachineObj
                {
                    // Create States
                    RootStates = new Dictionary<string, Dictionary<string, AnimationStateMachineObj.AnimationStateObj>>()
                };
                // Load Root State Buffer
                var rootStateBuffer = Hydra.ActiveGameReader.ReadBytes(animStateMachineHeader.RootStatesPointer, animStateMachineHeader.RootStateCount * 24);
                // Loop through them
                for (int i = 0; i < animStateMachineHeader.RootStateCount; i++)
                {
                    // Load State
                    var rootState = ByteUtil.BytesToStruct<AnimStateMachineRootStateHeader>(rootStateBuffer, i * 24);
                    // Get Name 
                    string stateName = GetString(rootState.NameStringIndex);
                    // Add to ASM
                    animStateMachine.RootStates[stateName] = new Dictionary<string, AnimationStateMachineObj.AnimationStateObj>();
                    // Check for Sub States
                    if(rootState.SubStateCount > 0 && rootState.SubStateIndicesPointer > 0)
                    {
                        // Read Indices
                        var indicesBuffer = Hydra.ActiveGameReader.ReadBytes(rootState.SubStateIndicesPointer, rootState.SubStateCount * 4);
                        // Add sub states
                        for(int j = 0; j < rootState.SubStateCount; j++)
                        {
                            // Get Sub State
                            var subState = subStates[BitConverter.ToInt32(indicesBuffer, j * 4)];
                            // Add to state
                            animStateMachine.RootStates[stateName][subState.Name] = subState;
                        }
                    }
                }

                // Save it
                animStateMachine.Save(path);

                // Done
                return true;
            }
        }
    }
}
